generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Recipe {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String

  mediaUrl    String   @default("https://via.placeholder.com/400.mp4")
  mediaType   String   @default("video")
  durationSec Int?

  prepTime Int
  cookTime Int
  servings Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isPublic Boolean @default(false)
  author   User?   @relation(fields: [authorId], references: [id])
  authorId Int?

  ingredients      Ingredient[]
  instructionSteps InstructionStep[]

  users RecipeUser[]
  likes Like[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Ingredient {
  id       Int     @id @default(autoincrement())
  name     String
  amount   String
  imageUrl String?
  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?
}

model InstructionStep {
  id         Int    @id @default(autoincrement())
  stepNumber Int
  text       String
  mediaUrl   String?
  mediaType  String?
  Recipe     Recipe? @relation(fields: [recipeId], references: [id])
  recipeId   Int?

  @@unique([recipeId, stepNumber])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  recipes Recipe[]
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  salt            String
  username        String
  birthdate       DateTime
  phone           String?
  country         String
  searchHistory   SearchHistory[]
  searchLog       SearchLog[]     @relation("searchLog")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  recipes         RecipeUser[]
  sessions        Session[]
  likes           Like[]
  authoredRecipes Recipe[]
  profileImageUrl String?
}

model Like {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int

  @@id([recipeId, userId])
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  queryHash String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, queryHash])
}

model SearchLog {
  id        String   @id @default(cuid())
  query     String
  queryHash String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(name: "searchLog", fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecipeUser {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  @@id([recipeId, userId])
}
